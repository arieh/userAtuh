userAuth v.0.2

===================
Content of package:
===================
1. classes
1.b. UserAuthDba.class.php         : an object for handling database related actions
1.b.1 UserAtuhDbaSession.class.php : an extention to the above that uses session to store temporary keys instead of DB
                                     this is extremly important for cases where several users are using the same router (almost always). its also much faster
1.b.2 DbaInterface.class.php       : an interface for the database object (to prompt creation of various database objects)
1.c. KeyHandler.class.php          : an object that supplies the interface for the package.

2. js
2.a. loginForm.js : the encryption functions for the client side
2.b. sha1.js      : a function for sha1 support for javascript

3.configs
3.a config.ini : configurations file

4. Demo:
4.a. dbconnect.php : a simple function that supplies a mysql_link.
4.b. login-db.php     : an example of how to use the KeyHandler authentication using the DB store class (UserAtuhDba)
4.c. login-form-db.php : an example of how to use generate a form using the db-store object.
4.d. login-session.php : same as above only using the session store (UserAtuhDbaSession)
4.e. login-form-ses.php : an example of how to use generate a form using the session object.

5. SQL - temp-keys.sql : the temp-keys table (only needed if you plan to use the DB store, which is not neccessary as of now)  

6. Test suit - simple tests for PHPUnit for all classes

=============
Installation:
=============

Creating the login Form:
------------------------
Server Side:
1. If you plan on using the built in DBAs, edit the ini file to match your users table.
2. If you plan on using the database to store your temp keys (UserAtuhDba) create a temp-keys table using the supplied sql file.
3. Instantiate the classes:
    3.a The built in DBAs require you to pass a valid mysql link resource, and a path to the ini file / an associative array containing the same keys as the ini file.
    3.b The KeyHandler require the first paramater to be a UserAtuhDbaI instance. The second isn't usualy needed. It is to be used if you want to supply a secondary 
        hashing mechanism on the client-side. If you do, add a corresponding function and pass it to the constructor (same possible options as call_user_func).
4. For creating the login form, use the getKey method.

Client Side:
5. On the client side - use the JS configurations to specify a different frm structure. You can also change the method used to hash the password. This is important if 
   you store your passwords in another way than a simple sha1 hash, or if you want to supply an additional hashing mechanism (the econd should be the one supplied to the
   KeyHandler constructor . 
   (you can find the config options in the unminified version of UserAtuh.js. It is recomended that you do not override them in the surce code). 
6. If you are not using the minified version, make sure you include the sha1.js file as well. 
7. The login form should have the setEncrypt function attached to his onsubmit event.

Authentication the form:
-------------------------
1. 1st, the library supplies a special POST var to indicate the javascript was used. by default that variables name will be verify, though you can change it in the js conf.
   If JS was used, it's value will be set to 'true'.
2. After instantiating the classes (same as the form creation), simply call the authenticate method with the supplied user name and encrypted hash (by default this will be $_POST['enc']
   but you can costumize it on the JS conf). The method will return true if credentials are valid, false otherwise.
   
You can look at the demos to see a simple use example. you can also use the test suite to see other use examples.
