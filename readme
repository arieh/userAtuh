userAuth v.0.2

===================
Content of package:
===================
1. classes
1.b. UserAuthDba.class.php         : an object for handling database related actions
1.b.1 UserAtuhDbaSession.class.php : an extention to the above that uses session to store temporary keys instead of DB
                                     this is extremly important for cases where several users are using the same router (almost always). its also much faster
1.b.2 DbaInterface.class.php       : an interface for the database object (to prompt creation of various database objects)
1.c. KeyHandler.class.php          : an object that supplies the interface for the package.

2. js
2.a. loginForm.js : the encryption functions for the client side
2.b. sha1.js      : a function for sha1 support for javascript

3.configs
3.a config.ini : configurations file

4. Demo:
4.a. dbconnect.php : a simple function that supplies a mysql_link.
4.b. login-db.php     : an example of how to use the KeyHandler authentication using the DB store class (UserAtuhDba)
4.c. login-session.php : same as above only using the session store (UserAtuhDbaSession)
4.d. loginForm.php : an example of how to use generate a form using the system.

5. SQL - temp-keys.sql : the temp-keys table (only needed if you plan to use the DB store, which is not neccessary as of now)  

6. Test suit - simple tests for PHPUnit for all classes

=============
Installation:
=============

1. insert the temp-keys table into your database.
2. edit the config.ini file, to match your users table.
3. you need to supply the handler a mysql_link. in the example i do this with the dbconnect.php file, which can be used as well.
    (you can use the interface to create DB-access objects for other databases)
4. if your passwords are not encoded with sha1 in the database, change the third parameter in the authenticate call to false.

use the examples i gave you to play around with it. notice that if you change the field names in the form, you need to change them in the JS file as well

if you use a different folder structure, supply the KeyHandler the location of the ini file (as done in the example).

notice also, that i do not do input validation of any sort (other than check that the user name exists). you should make sure that you do, 
and that you secure the input for SQL injection and XSS (the library now allows you to set a function to run on input before sending it to the DB).

UserAtuhDba now requiers you to supply configuration data in one of 2 ways:
1. a path to a valid ini file.
2. an assosiative array that has the same configurations (although you don't have to have escaping paramaters for it to work). This is the only way to call static methods for escaping input. 
